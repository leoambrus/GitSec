{
  "ID": {
    "GitHub_Advisory_Database": {
      "aliases": [
        "CVE-2024-21626"
      ]
    },
    "Nomisec1": {
      "id": 751354058,
      "name": "CVE-2024-21626-POC",
      "full_name": "zpxlz/CVE-2024-21626-POC"
    },
    "Nomisec2": {
      "id": 751422888,
      "name": "CVE-2024-21626",
      "full_name": "NitroCao/CVE-2024-21626"
    },
    "Nomisec3": {
      "id": 751649154,
      "name": "CVE-2024-21626-POC",
      "full_name": "Wall1e/CVE-2024-21626-POC"
    },
    "Nomisec4": {
      "id": 751664848,
      "name": "CVE-2024-21626",
      "full_name": "cdxiaodong/CVE-2024-21626"
    },
    "Nomisec5": {
      "id": 751707713,
      "name": "CVE-2024-21626",
      "full_name": "zhangguanzhang/CVE-2024-21626"
    },
    "Nomisec6": {
      "id": 751817784,
      "name": "CVE-2024-21626-demo",
      "full_name": "laysakura/CVE-2024-21626-demo"
    },
    "Nomisec7": {
      "id": 753221669,
      "name": "CVE-2024-21626-runcPOC",
      "full_name": "V0WKeep3r/CVE-2024-21626-runcPOC"
    },
    "Nomisec8": {
      "id": 765630308,
      "name": "CVE-2024-21626",
      "full_name": "abian2/CVE-2024-21626"
    },
    "Nomisec9": {
      "id": 772512207,
      "name": "CVE-2024-21626",
      "full_name": "Sk3pper/CVE-2024-21626"
    },
    "Nomisec10": {
      "id": 781441452,
      "name": "CVE-2024-21626",
      "full_name": "KubernetesBachelor/CVE-2024-21626"
    },
    "Nomisec11": {
      "id": 784647452,
      "name": "cve-2024-21626",
      "full_name": "dorser/cve-2024-21626"
    },
    "Nomisec12": {
      "id": 847346997,
      "name": "CVE-2024-21626",
      "full_name": "FlojBoj/CVE-2024-21626"
    }
  },
  "summary": "runc vulnerable to container breakout through process.cwd trickery and leaked fds",
  "details": {
    "GitHub_Advisory_Database": "### Impact\n\nIn runc 1.1.11 and earlier, due to an internal file descriptor leak, an attacker could cause a newly-spawned container process (from `runc exec`) to have a working directory in the host filesystem namespace, allowing for a container escape by giving access to the host filesystem (\"attack 2\"). The same attack could be used by a malicious image to allow a container process to gain access to the host filesystem through `runc run` (\"attack 1\"). Variants of attacks 1 and 2 could be also be used to overwrite semi-arbitrary host binaries, allowing for complete container escapes (\"attack 3a\" and \"attack 3b\").\n\nStrictly speaking, while attack 3a is the most severe from a CVSS perspective, attacks 2 and 3b are arguably more dangerous in practice because they allow for a breakout from inside a container as opposed to requiring a user execute a malicious image. The reason attacks 1 and 3a are scored higher is because being able to socially engineer users is treated as a given for UI:R vectors, despite attacks 2 and 3b requiring far more minimal user interaction (just reasonable `runc exec` operations on a container the attacker has access to). In any case, all four attacks can lead to full control of the host system.\n\n#### Attack 1: `process.cwd` \"mis-configuration\"\n\nIn runc 1.1.11 and earlier, several file descriptors were inadvertently leaked internally within runc into `runc init`, including a handle to the host's `/sys/fs/cgroup` (this leak was added in v1.0.0-rc93). If the container was configured to have `process.cwd` set to `/proc/self/fd/7/` (the actual fd can change depending on file opening order in `runc`), the resulting pid1 process will have a working directory in the host mount namespace and thus the spawned process can access the entire host filesystem. This alone is not an exploit against runc, however a malicious image could make any innocuous-looking non-`/` path a symlink to `/proc/self/fd/7/` and thus trick a user into starting a container whose binary has access to the host filesystem.\n\nFurthermore, prior to runc 1.1.12, runc also did not verify that the final working directory was inside the container's mount namespace after calling `chdir(2)` (as we have already joined the container namespace, it was incorrectly assumed there would be no way to chdir outside the container after `pivot_root(2)`).\n\nThe CVSS score for this attack is CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:N (8.2, high severity).\n\nNote that this attack requires a privileged user to be tricked into running a malicious container image. It should be noted that when using higher-level runtimes (such as Docker or Kubernetes), this exploit can be considered critical as it can be done remotely by anyone with the rights to start a container image (and can be exploited from within Dockerfiles using `ONBUILD` in the case of Docker).\n\n#### Attack 2: `runc exec` container breakout\n\n(This is a modification of attack 1, constructed to allow for a process inside a container to break out.)\n\nThe same fd leak and lack of verification of the working directory in attack 1 also apply to `runc exec`. If a malicious process inside the container knows that some administrative process will call `runc exec` with the `--cwd` argument and a given path, in most cases they can replace that path with a symlink to `/proc/self/fd/7/`. Once the container process has executed the container binary, `PR_SET_DUMPABLE` protections no longer apply and the attacker can open `/proc/$exec_pid/cwd` to get access to the host filesystem.\n\n`runc exec` defaults to a cwd of `/` (which cannot be replaced with a symlink), so this attack depends on the attacker getting a user (or some administrative process) to use `--cwd` and figuring out what path the target working directory is. Note that if the target working directory is a parent of the program binary being executed, the attacker might be unable to replace the path with a symlink (the `execve` will fail in most cases, unless the host filesystem layout specifically matches the container layout in specific ways and the attacker knows which binary the `runc exec` is executing).\n\nThe CVSS score for this attack is CVSS:3.1/AV:L/AC:H/PR:L/UI:R/S:C/C:H/I:H/A:N (7.2, high severity).\n\n#### Attacks 3a and 3b: `process.args` host binary overwrite attack\n\n(These are modifications of attacks 1 and 2, constructed to overwrite a host binary by using `execve` to bring a magic-link reference into the container.)\n\nAttacks 1 and 2 can be adapted to overwrite a host binary by using a path like `/proc/self/fd/7/../../../bin/bash` as the `process.args` binary argument, causing a host binary to be executed by a container process. The `/proc/$pid/exe` handle can then be used to overwrite the host binary, as seen in CVE-2019-5736 (note that the same `#!` trick can be used to avoid detection as an attacker). As the overwritten binary could be something like `/bin/bash`, as soon as a privileged user executes the target binary on the host, the attacker can pivot to gain full access to the host.\n\nFor the purposes of CVSS scoring:\n\n* Attack 3a is attack 1 but adapted to overwrite a host binary, where a malicious image is set up to execute `/proc/self/fd/7/../../../bin/bash` and run a shell script that overwrites `/proc/self/exe`, overwriting the host copy of `/bin/bash`. The CVSS score for this attack is CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:H (8.6, high severity).\n* Attack 3b is attack 2 but adapted to overwrite a host binary, where the malicious container process overwrites all of the possible `runc exec` target binaries inside the container (such as `/bin/bash`) such that a host target binary is executed and then the container process opens `/proc/$pid/exe` to get access to the host binary and overwrite it. The CVSS score for this attack is CVSS:3.1/AV:L/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:H (8.2, high severity).\n\nAs mentioned in attack 1, while 3b is scored lower it is more dangerous in practice as it doesn't require a user to run a malicious image.\n\n### Patches\nrunc 1.1.12 has been released, and includes patches for this issue. Note that there are four separate fixes applied:\n\n* Checking that the working directory is actually inside the container by checking whether `os.Getwd` returns `ENOENT` (Linux provides a way of detecting if cwd is outside the current namespace root). This explicitly blocks runc from executing a container process when inside a non-container path and thus eliminates attacks 1 and 2 even in the case of fd leaks.\n* Close all internal runc file descriptors in the final stage of `runc init`, right before `execve`. This ensures that internal file descriptors cannot be used as an argument to `execve` and thus eliminates attacks 3a and 3b, even in the case of fd leaks. This requires hooking into some Go runtime internals to make sure we don't close critical Go internal file descriptors.\n* Fixing the specific fd leaks that made these bug exploitable (mark `/sys/fs/cgroup` as `O_CLOEXEC` and backport a fix for some `*os.File` leaks).\n* In order to protect against future `runc init` file descriptor leaks, mark all non-stdio files as `O_CLOEXEC` before executing `runc init`.\n\n### Other Runtimes\n\nWe have discovered that several other container runtimes are either potentially vulnerable to similar attacks, or do not have sufficient protection against attacks of this nature. We recommend other container runtime authors look at [our patches](#Patches) and make sure they at least add a `getcwd() != ENOENT` check as well as consider whether `close_range(3, UINT_MAX, CLOSE_RANGE_CLOEXEC)` before executing their equivalent of `runc init` is appropriate.\n\n * crun 1.12 does not leak any useful file descriptors into the `runc init`-equivalent process (so this attack is _not exploitable_ as far as we can tell), but no care is taken to make sure all non-stdio files are `O_CLOEXEC` and there is no check after `chdir(2)` to ensure the working directory is inside the container. If a file descriptor happened to be leaked in the future, this could be exploitable. In addition, any file descriptors passed to `crun` are not closed until the container process is executed, meaning that easily-overlooked programming errors by users of `crun` can lead to these attacks becoming exploitable.\n * youki 0.3.1 does not leak any useful file descriptors into the `runc init`-equivalent process (so this attack is _not exploitable_ as far as we can tell) however this appears to be pure luck. `youki` does leak a directory file descriptor from the host mount namespace, but it just so happens that the directory is the rootfs of the container (which then gets `pivot_root`'d into and so ends up as a in-root path thanks to `chroot_fs_refs`). In addition, no care is taken to make sure all non-stdio files are `O_CLOEXEC` and there is no check after `chdir(2)` to ensure the working directory is inside the container. If a file descriptor happened to be leaked in the future, this could be exploitable. In addition, any file descriptors passed to `youki` are not closed until the container process is executed, meaning that easily-overlooked programming errors by users of `youki` can lead to these attacks becoming exploitable.\n * LXC 5.0.3 does not appear to leak any useful file descriptors, and they have comments noting the importance of not leaking file descriptors in `lxc-attach`. However, they don't seem to have any proactive protection against file descriptor leaks at the point of `chdir` such as using `close_range(...)` (they do have RAII-like `__do_fclose` closers but those don't necessarily stop all leaks in this context) nor do they have any check after `chdir(2)` to ensure the working directory is inside the container. Unfortunately it seems they cannot use `CLOSE_RANGE_CLOEXEC` because they don't need to re-exec themselves.\n\n### Workarounds\nFor attacks 1 and 2, only permit containers (and `runc exec`) to use a `process.cwd` of `/`. It is not possible for `/` to be replaced with a symlink (the path is resolved from within the container's mount namespace, and you cannot change the root of a mount namespace or an fs root to a symlink).\n\nFor attacks 1 and 3a, only permit users to run trusted images.\n\nFor attack 3b, there is no practical workaround other than never using `runc exec` because any binary you try to execute with `runc exec` could end up being a malicious binary target.\n\n### See Also\n* https://www.cve.org/CVERecord?id=CVE-2024-21626\n* https://github.com/opencontainers/runc/releases/tag/v1.1.12\n* The runc 1.1.12 merge commit https://github.com/opencontainers/runc/commit/a9833ff391a71b30069a6c3f816db113379a4346, which contains the following security patches:\n  * https://github.com/opencontainers/runc/commit/506552a88bd3455e80a9b3829568e94ec0160309\n  * https://github.com/opencontainers/runc/commit/0994249a5ec4e363bfcf9af58a87a722e9a3a31b\n  * https://github.com/opencontainers/runc/commit/fbe3eed1e568a376f371d2ced1b4ac16b7d7adde\n  * https://github.com/opencontainers/runc/commit/284ba3057e428f8d6c7afcc3b0ac752e525957df\n  * https://github.com/opencontainers/runc/commit/b6633f48a8c970433737b9be5bfe4f25d58a5aa7\n  * https://github.com/opencontainers/runc/commit/683ad2ff3b01fb142ece7a8b3829de17150cf688\n  * https://github.com/opencontainers/runc/commit/e9665f4d606b64bf9c4652ab2510da368bfbd951\n\n### Credits\n\nThanks to Rory McNamara from Snyk for discovering and disclosing the original vulnerability (attack 1) to Docker, @lifubang from acmcoder for discovering how to adapt the attack to overwrite host binaries (attack 3a), and Aleksa Sarai from SUSE for discovering how to adapt the attacks to work as container breakouts using `runc exec` (attacks 2 and 3b)."
  },
  "description": {
    "Nomisec1": null,
    "Nomisec2": "PoC and Detection for CVE-2024-21626",
    "Nomisec3": null,
    "Nomisec4": "CVE-2024-21626-poc-research-Reappearance-andtodo",
    "Nomisec5": null,
    "Nomisec6": "Container Runtime Meetup #5 \u306eLT\u7528\u306e\u30c7\u30e2",
    "Nomisec7": null,
    "Nomisec8": null,
    "Nomisec9": null,
    "Nomisec10": "POC",
    "Nomisec11": null,
    "Nomisec12": null
  },
  "topics": [],
  "severity": [],
  "affected": [],
  "references": [
    {
      "type": "WEB",
      "url": "https://github.com/opencontainers/runc/security/advisories/GHSA-xr7r-f8xq-vfvv"
    },
    {
      "type": "ADVISORY",
      "url": "https://nvd.nist.gov/vuln/detail/CVE-2024-21626"
    },
    {
      "type": "WEB",
      "url": "https://github.com/opencontainers/runc/commit/02120488a4c0fc487d1ed2867e901eeed7ce8ecf"
    },
    {
      "type": "PACKAGE",
      "url": "https://github.com/opencontainers/runc"
    },
    {
      "type": "WEB",
      "url": "https://github.com/opencontainers/runc/releases/tag/v1.1.12"
    },
    {
      "type": "WEB",
      "url": "https://lists.debian.org/debian-lts-announce/2024/02/msg00005.html"
    },
    {
      "type": "WEB",
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/2NLXNE23Q5ESQUAI22Z7A63JX2WMPJ2J"
    },
    {
      "type": "WEB",
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/SYMO3BANINS6RGFQFKPRG4FIOJ7GWYTL"
    },
    {
      "type": "WEB",
      "url": "http://packetstormsecurity.com/files/176993/runc-1.1.11-File-Descriptor-Leak-Privilege-Escalation.html"
    },
    {
      "type": "WEB",
      "url": "http://www.openwall.com/lists/oss-security/2024/02/01/1"
    },
    {
      "type": "WEB",
      "url": "http://www.openwall.com/lists/oss-security/2024/02/02/3"
    }
  ],
  "proof_of_concept": {
    "owner1": {
      "html_url": "https://github.com/zpxlz"
    },
    "html_url1": "https://github.com/zpxlz/CVE-2024-21626-POC",
    "owner2": {
      "html_url": "https://github.com/NitroCao"
    },
    "html_url2": "https://github.com/NitroCao/CVE-2024-21626",
    "owner3": {
      "html_url": "https://github.com/Wall1e"
    },
    "html_url3": "https://github.com/Wall1e/CVE-2024-21626-POC",
    "owner4": {
      "html_url": "https://github.com/cdxiaodong"
    },
    "html_url4": "https://github.com/cdxiaodong/CVE-2024-21626",
    "owner5": {
      "html_url": "https://github.com/zhangguanzhang"
    },
    "html_url5": "https://github.com/zhangguanzhang/CVE-2024-21626",
    "owner6": {
      "html_url": "https://github.com/laysakura"
    },
    "html_url6": "https://github.com/laysakura/CVE-2024-21626-demo",
    "owner7": {
      "html_url": "https://github.com/V0WKeep3r"
    },
    "html_url7": "https://github.com/V0WKeep3r/CVE-2024-21626-runcPOC",
    "owner8": {
      "html_url": "https://github.com/abian2"
    },
    "html_url8": "https://github.com/abian2/CVE-2024-21626",
    "owner9": {
      "html_url": "https://github.com/Sk3pper"
    },
    "html_url9": "https://github.com/Sk3pper/CVE-2024-21626",
    "owner10": {
      "html_url": "https://github.com/KubernetesBachelor"
    },
    "html_url10": "https://github.com/KubernetesBachelor/CVE-2024-21626",
    "owner11": {
      "html_url": "https://github.com/dorser"
    },
    "html_url11": "https://github.com/dorser/cve-2024-21626",
    "owner12": {
      "html_url": "https://github.com/FlojBoj"
    },
    "html_url12": "https://github.com/FlojBoj/CVE-2024-21626"
  },
  "has_discussions": null,
  "database_specific": {
    "cwe_ids": [
      "CWE-403",
      "CWE-668"
    ],
    "severity": "HIGH",
    "github_reviewed": true,
    "github_reviewed_at": "2024-01-31T22:44:08Z",
    "nvd_published_at": "2024-01-31T22:15:53Z"
  },
  "Time_Description": {
    "GitHub_Advisory_Database": {
      "modified": "2024-07-05T21:38:20Z",
      "published": "2024-01-31T22:44:08Z",
      "withdrawn": null
    },
    "Nomisec": {
      "created_at1": "2024-02-01T12:53:18Z",
      "updated_at1": "2024-02-02T09:26:46Z",
      "pushed_at1": "2024-02-01T20:19:03Z",
      "created_at2": "2024-02-01T15:28:37Z",
      "updated_at2": "2024-09-22T00:50:02Z",
      "pushed_at2": "2024-02-06T16:09:05Z",
      "created_at3": "2024-02-02T02:51:29Z",
      "updated_at3": "2024-07-05T07:05:37Z",
      "pushed_at3": "2024-02-02T09:49:34Z",
      "created_at4": "2024-02-02T03:56:03Z",
      "updated_at4": "2024-04-21T01:29:16Z",
      "pushed_at4": "2024-02-02T04:56:50Z",
      "created_at5": "2024-02-02T06:34:16Z",
      "updated_at5": "2024-02-05T19:02:10Z",
      "pushed_at5": "2024-02-02T09:53:25Z",
      "created_at6": "2024-02-02T11:51:08Z",
      "updated_at6": "2024-04-17T13:23:55Z",
      "pushed_at6": "2024-02-02T14:33:19Z",
      "created_at7": "2024-02-05T17:47:01Z",
      "updated_at7": "2024-04-12T10:50:03Z",
      "pushed_at7": "2024-02-05T19:12:00Z",
      "created_at8": "2024-03-01T09:58:50Z",
      "updated_at8": "2024-06-03T17:15:22Z",
      "pushed_at8": "2024-06-03T17:15:19Z",
      "created_at9": "2024-03-15T10:38:27Z",
      "updated_at9": "2024-08-21T06:54:58Z",
      "pushed_at9": "2024-08-21T06:54:54Z",
      "created_at10": "2024-04-03T11:45:19Z",
      "updated_at10": "2024-08-05T17:01:03Z",
      "pushed_at10": "2024-04-11T15:23:06Z",
      "created_at11": "2024-04-10T09:12:06Z",
      "updated_at11": "2024-05-01T19:07:43Z",
      "pushed_at11": "2024-04-16T18:47:57Z",
      "created_at12": "2024-08-25T15:11:42Z",
      "updated_at12": "2024-09-03T13:34:42Z",
      "pushed_at12": "2024-09-02T07:56:50Z"
    }
  }
}